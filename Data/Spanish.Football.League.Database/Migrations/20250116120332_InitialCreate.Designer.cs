// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Spanish.Football.League.Database;

#nullable disable

namespace Spanish.Football.League.Database.Migrations
{
    [DbContext(typeof(SpanishFootballLeagueDbContext))]
    [Migration("20250116120332_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("spanish_football_league")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Spanish.Football.League.DomainModels.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AwayTeamName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("away_team_name");

                    b.Property<decimal>("AwayTeamOdd")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("away_team_odd");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("HomeTeamName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("home_team_name");

                    b.Property<decimal>("HomeTeamOdd")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("home_team_odd");

                    b.Property<int>("SeasonHalf")
                        .HasColumnType("integer")
                        .HasColumnName("season_half");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.HasKey("Id")
                        .HasName("pk_matches");

                    b.HasIndex("AwayTeamName")
                        .HasDatabaseName("ix_matches_away_team_name");

                    b.HasIndex("HomeTeamName")
                        .HasDatabaseName("ix_matches_home_team_name");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_matches_season_id");

                    b.ToTable("matches", "spanish_football_league");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("result_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AwayTeamName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("away_team_name");

                    b.Property<int>("AwayTeamScore")
                        .HasColumnType("integer")
                        .HasColumnName("away_team_score");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("HomeTeamName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("home_team_name");

                    b.Property<int>("HomeTeamScore")
                        .HasColumnType("integer")
                        .HasColumnName("home_team_score");

                    b.Property<bool?>("IsExpected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_expected");

                    b.Property<int>("SeasonHalf")
                        .HasColumnType("integer")
                        .HasColumnName("season_half");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.HasKey("Id")
                        .HasName("pk_results");

                    b.HasIndex("AwayTeamName")
                        .HasDatabaseName("ix_results_away_team_name");

                    b.HasIndex("HomeTeamName")
                        .HasDatabaseName("ix_results_home_team_name");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_results_season_id");

                    b.ToTable("results", "spanish_football_league");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer")
                        .HasColumnName("season_year");

                    b.HasKey("Id")
                        .HasName("pk_seasons");

                    b.ToTable("seasons", "spanish_football_league");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.SeasonStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConcededGoals")
                        .HasColumnType("integer")
                        .HasColumnName("conceded_goals");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("Draws")
                        .HasColumnType("integer")
                        .HasColumnName("draws");

                    b.Property<int>("GoalDifference")
                        .HasColumnType("integer")
                        .HasColumnName("goal_difference");

                    b.Property<int>("Losses")
                        .HasColumnType("integer")
                        .HasColumnName("losses");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<int>("ScoredGoals")
                        .HasColumnType("integer")
                        .HasColumnName("scored_goals");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("team_name");

                    b.Property<int>("Wins")
                        .HasColumnType("integer")
                        .HasColumnName("wins");

                    b.HasKey("Id")
                        .HasName("pk_season_stats");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_season_stats_season_id");

                    b.HasIndex("TeamName")
                        .HasDatabaseName("ix_season_stats_team_name");

                    b.ToTable("season_stats", "spanish_football_league");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("TeamId")
                        .HasName("pk_teams");

                    b.HasAlternateKey("Name")
                        .HasName("ak_teams_name");

                    b.ToTable("teams", "spanish_football_league");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.TeamDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("ExpectedWinPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("expected_win_percentage");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("team_name");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_team_details");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_team_details_season_id");

                    b.HasIndex("TeamName")
                        .HasDatabaseName("ix_team_details_team_name");

                    b.ToTable("team_details", "spanish_football_league");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.Winner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("winner_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<string>("WinnerTeamName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("winner_team_name");

                    b.HasKey("Id")
                        .HasName("pk_winners");

                    b.HasIndex("WinnerTeamName")
                        .HasDatabaseName("ix_winners_winner_team_name");

                    b.ToTable("winners", "spanish_football_league");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.Match", b =>
                {
                    b.HasOne("Spanish.Football.League.DomainModels.Team", null)
                        .WithMany()
                        .HasForeignKey("AwayTeamName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_matches_teams_away_team_name");

                    b.HasOne("Spanish.Football.League.DomainModels.Team", null)
                        .WithMany()
                        .HasForeignKey("HomeTeamName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_matches_teams_home_team_name");

                    b.HasOne("Spanish.Football.League.DomainModels.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_matches_seasons_season_id");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.Result", b =>
                {
                    b.HasOne("Spanish.Football.League.DomainModels.Team", null)
                        .WithMany()
                        .HasForeignKey("AwayTeamName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_results_teams_away_team_name");

                    b.HasOne("Spanish.Football.League.DomainModels.Team", null)
                        .WithMany()
                        .HasForeignKey("HomeTeamName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_results_teams_home_team_name");

                    b.HasOne("Spanish.Football.League.DomainModels.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_results_seasons_season_id");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.SeasonStats", b =>
                {
                    b.HasOne("Spanish.Football.League.DomainModels.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_season_stats_seasons_season_id");

                    b.HasOne("Spanish.Football.League.DomainModels.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_season_stats_teams_team_name");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.TeamDetails", b =>
                {
                    b.HasOne("Spanish.Football.League.DomainModels.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_team_details_seasons_season_id");

                    b.HasOne("Spanish.Football.League.DomainModels.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_team_details_teams_team_name");
                });

            modelBuilder.Entity("Spanish.Football.League.DomainModels.Winner", b =>
                {
                    b.HasOne("Spanish.Football.League.DomainModels.Team", null)
                        .WithMany()
                        .HasForeignKey("WinnerTeamName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_winners_teams_winner_team_name");
                });
#pragma warning restore 612, 618
        }
    }
}
